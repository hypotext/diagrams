const {
  scalar perpLen = 20.0
  -- For unit mark
  scalar markerPadding = 15.0
  scalar barSize = 5.0
  scalar vectorSpaceSize = 350.0
  scalar repelWeight = 0.7
  scalar arrowheadSize = 0.7
  scalar lineThickness = 1.
  int intForTesting = 1
  bool boolForTesting = true
}

C {
    -- black = #000000
    color black = rgba(0.,0.,0.,1.)
    white = rgba(1., 1., 1., 1.)
    lightBlue = rgba(1e-1, 0.1, 0.9, 1.0)
    darkBlue = rgba(lightBlue.r / 2., lightBlue.g / 2., lightBlue.b / 2., 0.5)
    darkGray = rgba(0.4, 0.4, 0.4, 1.)
    gray = rgba(0.6, 0.6, 0.6, 1.)
    green = rgba(0., 0.8, 0., 1.)
    -- blue = #0000ff
    none = rgba(0., 0., 0., 0.)
}

-- Just some weird definitions to test parser. Not used in rest of program
testing {
  -- COMBAK: Test that plugins still run
  -- pluginVar = "ddg"["a"]["length"]
        x = { 1, {2, 3} }
        y = [-2., const.perpLen, const.markerPadding + 3]
        a = (-1.0, ?)
        a1 = (-1.0, 2.) + (1e5, 2.0)
        m = (a, (-1., 2.))
        v = (a + (2., 900.))  / (4.0 + 3.)
        -- z = Colors.black.g
        asum = a[1] + a[0]
        c = 0
        b = 1
        msum = m[1][0] + m[c][b]
        nv = -v
        t1 = x[1][b]

        -- test parser access of matrix
        -- test0 = f(0)[1]
        -- test1 = makeMatrix((1, 0.0, 5.0), (-1, -9., -4.))[2][0]
        -- test2 = (makeVector(-1, 3.0) + (3.4, 2.1))[0]
}

forall Vector u; VectorSpace U
where In(u,U) {
  u.text = Text {
    -- center : (?, ?) -- This should be done automatically
    string : u.label
    color : u.arrow.color
  }

  u.arrow = Arrow {
    start : U.origin
    end : (?, ?)
    thickness : 3.0
    color : C.lightBlue
    arrowheadSize : const.arrowheadSize
  }

   u.vector = u.arrow.end - u.arrow.start -- Vector sugar for subtraction

   ensure contains(U.background, u.arrow)
   ensure contains(U.background, u.text)
   ensure atDist(u.arrow, u.text, 15.0)
   ensure minSize(u.arrow)

  u.text above U.xAxis
  u.text above U.yAxis
  U.background below u.text
  U.background below u.arrow
}

forall VectorSpace U {
    scalar axisSize = const.vectorSpaceSize / 2.0 -- This should get promoted to float
    vec2 U.origin = (0., 0.)
    vec2 o = U.origin
    U.axisColor = C.gray

    shape U.background = Square {
        center : U.origin
        w: const.vectorSpaceSize
        h: const.vectorSpaceSize
        color : C.none
        strokeColor : C.none
        -- strokeWidth : 2.0
    }

    shape U.xAxis = Line {
        start : (o[0] - axisSize, o[1]) -- TODO This gets mis-parsed as a matrix access
        end : (o[0] + axisSize, o[1])
        thickness : const.lineThickness
        style : "solid"
        color : U.axisColor
        leftArrowhead: True
        rightArrowhead: True
        arrowheadSize : const.arrowheadSize * 2.
    }

    U.yAxis = Line {
           start : (o[0], o[1] - axisSize)
             end : (o[0], o[1] + axisSize)
       thickness : const.lineThickness
           style : "solid"
           color : U.axisColor
           leftArrowhead: True
           rightArrowhead: True
        arrowheadSize : const.arrowheadSize * 2.
    }

    U.text = Text {
        string : U.label
        fontSize: "15pt"
        center : (U.origin[0] - axisSize, U.origin[1] + axisSize)
        color : U.axisColor
    }
}



/*
forall Vector u; Vector v
with VectorSpace U
where Independent(u, v); In(u, U); In(v, U) {
    startR = u.arrow.start -- TODO: Do we want destructuring syntax like vec2[] [startR, endR] = [u.arrow.start, u.arrow.end]
    endR = u.arrow.end
    startL = v.arrow.start
    endL = v.arrow.end
    dirR = unit(endR - startR)  -- Syntax sugar for vectors (better in Style because JS doesn't allow it!)
    dirL = unit(endL - startL)
    encourage equal(dirR + dirL, 0.0) -- NOTE: Have to import Penrose fns
}
*/

forall Vector u; Vector v
with VectorSpace U
where Orthogonal(u, v); In(u, U); In(v, U) {
      startR = u.arrow.start -- TODO: Do we want destructuring syntax like vec2[] [startR, endR] = [u.arrow.start, u.arrow.end]
      endR = u.arrow.end
      startL = v.arrow.start
      endL = v.arrow.end
      dirR = unit(endR - startR)  -- Syntax sugar for vectors (better in Style because JS doesn't allow it!)
      dirL = unit(endL - startL)
      ptL = startR + const.perpLen * dirL
      ptR = startR + const.perpLen * dirR
      ptLR = ptL + const.perpLen * dirR
      pts = [startR, ptL, ptLR, ptR]

      -- toPath = functions.pathFromPoints -- COMBAK: Add ability to alias function names

      -- Draw perpendicular mark -- NOTE: local shapes should still be drawn
      perpMark = Path {
           pathData : pathFromPoints("closed", pts)
           strokeWidth : 2.0
           color : C.black
           fill : C.white
      }

      -- Make sure vectors are orthogonal (use ensure?)
      -- eq = functions.equal
      encourage equal(dot(u.vector, v.vector), 0.0) -- NOTE: Have to import Penrose fns

-- COMBAK: Test parsing the expressions that involve local vars 
      layer v.arrow above perpMark
      layer u.arrow above perpMark
}

forall Vector v
with VectorSpace U; Vector w
where In(v, U); Unit(v); Orthogonal(v, w) {
      -- Usually, the unit vector shouldn't need to know about orthogonal vectors
      -- but we need to position the unit mark so it doesn't overlap with the "inside" of the two vectors

      strokeWidth = 2.0
      padding = 15.0 -- COMBAK: What is this?
      -- toPath = functions.pathFromPoints -- COMBAK

      -- The start and end of the body of the unit marker line
      -- NOTE: We need to have lists of vectors
      dir = unit(w.arrow.end - w.arrow.start)
      normal = -dir
      markStart = v.arrow.start + padding * normal
      markEnd = v.arrow.end + padding * normal
      v.markerLine = [markStart, markEnd]

      v.unitMarkerLine = Path {
          pathData : pathFromPoints("open", v.markerLine)
          strokeWidth : strokeWidth
          color : C.black
          fill : C.none
      }

      -- Could use normal instead, just doing this to demonstrate how to use matrices
      mat2x2 rot90CW = ((0., 1.), (-1., 0.))
      vec2 markNormal = mul(rot90CW, unit(v.arrow.end - v.arrow.start)) -- TODO: Do we want syntactic sugar for matrix-vector multiplication? Or a better name?
      scalar c = const.barSize
      vec2 halfvec = c * markNormal

      v.unitMarkerEnd1 = Path {
          pathData : pathFromPoints("open", [markStart - halfvec, markStart + halfvec]) -- TODO: Can we infer this type if it's written anonymously?
          strokeWidth : strokeWidth
          color : C.black
          fill : C.none
      }

      v.unitMarkerEnd2 = Path {
          pathData : pathFromPoints("open", [markEnd - halfvec, markEnd + halfvec])
          strokeWidth : strokeWidth
          color : C.black
          fill : C.none
      }

      vec2 midpointLoc = (v.markerLine[0] + v.markerLine[1]) / 2.
      vec2 labelPos = midpointLoc + const.markerPadding * normal

      v.unitMarkerText = Text {
          string : "1"
          center : labelPos
          color : C.black
      }

      layer v.unitMarkerLine above U.xAxis
      layer v.unitMarkerLine above U.yAxis
}

forall Vector `b` {
       override `b`.arrow.color = C.green
}
