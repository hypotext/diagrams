-- GOAL: Get all lines and boxes to be disjoint from each other. (AABB - horizontal)

Colors {
    Colors.black = rgba(0.0, 0.0, 0.0, 1.0)
    Colors.gray = rgba(0.8, 0.8, 0.8, 1.0)
    Colors.red = rgba(1.0, 0.0, 0.0, 1.0)
    Colors.pink = rgba(1.0, 0.4, 0.7, 1.0)
    Colors.yellow = rgba(1.0, 1.0, 0.0, 1.0)
    Colors.orange = rgba(1.0, 0.6, 0.0, 1.0)
    Colors.green = rgba(0.0, 1.0, 0.0, 1.0)
    Colors.blue = rgba(0.0, 0.0, 1.0, 1.0)
    Colors.sky = rgba(0.325, 0.718, 0.769, 1.0)
    Colors.cyan = rgba(0.0, 1.0, 1.0, 1.0)
    Colors.purple = rgba(0.5, 0.0, 0.5, 1.0)
    Colors.white = rgba(1.0, 1.0, 1.0, 1.0)
    Colors.none = rgba(0.0, 0.0, 0.0, 0.0)
}

global {
    global.padding = 20.0
    global.stroke = 2.0
    global.width = 600.
    global.box = Rectangle {
               center: (0., 0.)
               w: global.width + 300.
               h: global.width
               color: Colors.none
               strokeColor: Colors.black
    }
    global.vertexWidth = 100.
}

Vertex V {
       V.x = ? -- VARYING_INIT(0.)
       V.y = ? -- VARYING_INIT(0.)
       -- I guess if they're all in the same loc, there's a divide by 0

       -- V.xpad = VARYING_INIT(100.)
       -- V.ypad = VARYING_INIT(50.)

       V.xpad = 0.
       V.ypad = 60.

       V.shape = Rectangle { 
         center: (V.x, V.y)
         -- w: V.text.w + global.padding
         -- h: V.text.h + global.padding
         w: global.vertexWidth + V.xpad
         h: global.vertexWidth + V.ypad
         color : Colors.none
         strokeWidth : 2.
         strokeColor: Colors.black
       }

       V.text = Text {
	 center: V.shape.center
	 string : V.label
	 color : Colors.black
       }

       ensure contains(global.box, V.shape)

       V.text above V.shape
       -- V.shape above global.box
}

Edge e {
       e.len = 200.
       e.center = ?
       e.y = ?

       e.left = -e.len/2. + e.center
       e.right = e.len/2. + e.center

       e.shape = Line {
                  start: (e.left, e.y)
                  end: (e.right, e.y)
                  thickness: 10.
       }

       e.text = Text {
	 center: (e.shape.start + e.shape.end) / 2.
	 string : e.label
	 color : Colors.black
       }

       ensure containsRectLineAA(global.box, e.shape)
}

Edge `e2` {
     override `e2`.len = 100.
}

Vertex `v1` {
       override `v1`.shape.w = 500.
}

-- This is applied to each pair twice (as (a,b) then (b,a)) -- is that ok?
Vertex v1; Vertex v2 {
       ensure disjoint(v1.shape, v2.shape, 0.)
}

-- This cannot apply pairwise as containment will make them equal!
-- Edge `e1`; Edge `e2` {
--      ensure contains1D([`e1`.left, `e1`.right], [`e2`.left, `e2`.right])
-- }

Vertex v; Edge e {
       ensure disjointRectLineAAHoriz(v.shape, e.shape)
}

-- Vertex `v1`; Vertex `v2` {
--        ensure disjoint(`v1`.shape, `v2`.shape)
-- }

-- Vertex `v2`; Vertex `v3` {
--        ensure disjoint(`v2`.shape, `v3`.shape)
-- }

-- Vertex `v1`; Vertex `v3` {
--        ensure disjoint(`v1`.shape, `v3`.shape)
-- }

