import { resample, stepState } from "API";
import * as React from "react";
import ButtonBar from "ui/ButtonBar";
import Canvas from "ui/Canvas";
import { converged } from "packets";
import Resample from "ui/icons/Resample";
import Logo from "ui/icons/Logo";
import "./Embed.css";

interface IEmbedState {
  data: State;
}

class Embed extends React.Component<any, IEmbedState> {
  buttons: React.RefObject<ButtonBar>;
  canvas: React.RefObject<Canvas>;

  // NOTE: assume an initial state passed in upon mounting
  constructor(props: IEmbedState) {
    super(props);
    this.state = { data: props.data };
    this.canvas = React.createRef<Canvas>();
    this.buttons = React.createRef<ButtonBar>();
    // step until convergence
    this.step();
  }

  public onCanvasState = async (canvasState: State) => {
    // HACK: this will enable the "animation" that we normally expect
    await new Promise((r) => setTimeout(r, 1));
    this.setState({
      data: canvasState,
    });
    if (!converged(canvasState)) {
      this.step();
    }
  };

  public step = () => {
    const stepped = stepState(this.state.data!);
    void this.onCanvasState(stepped);
  };

  public resample = () => {
    const NUM_SAMPLES = 1;
    const oldState = this.state.data;
    if (oldState) {
      const resampled = resample(oldState, NUM_SAMPLES);
      void this.onCanvasState(resampled);
    }
  };

  public updateData = async (data: State) => {
    this.setState({ data: { ...data } });
    const stepped = stepState(data);
    void this.onCanvasState(stepped);
  };

  public render() {
    const { data } = this.state;
    return (
      <div className="penrose-embed">
        <Canvas data={data} updateData={this.updateData} lock={false} />
        <div className="embed-footer">
          <Logo width={24} color={"white"} />
          <p style={{ marginLeft: 10 }}>
            Generated by Penrose with 🍑.💦🍆🔥🏳️‍🌈
          </p>
          <div onClick={this.resample}>
            <Resample size={24} color={"white"} />
          </div>
        </div>
      </div>
    );
  }
}

export default Embed;
